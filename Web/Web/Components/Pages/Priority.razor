@page "/home/{TokenUser}/{TokenTask}/Priority"
@inject NavigationManager NavigationManager
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime
@code {
    [Parameter]
    public string TokenUser { get; set; } = string.Empty;
    [Parameter]
    public string TokenTask { get; set; } = string.Empty;
    public Model.Priority Prioritys { get; set; } = new Model.Priority();
    public async void Accept()
    {
        var apiClient = new ApiClient("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9." +
       "eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoi" +
       "MTIzMTIzIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFt" +
       "ZWlkZW50aWZlZXIiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMDA" +
       "iLCJleHAiOjE3MzA5MDY3NDN9.ero6vopzxEbCz0XWeRIQ0eNOKL6q_CeKRMDApZeTAyc", "LANVER2024@");
        try
        {
            if (Prioritys.Name != null)
            {
                await apiClient.PostPriority(Prioritys.Name);
                NavigationManager.NavigateTo($"/home/{TokenUser}/{TokenTask}", true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("SelectError", "Введите названия приоритет");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("SelectError", ex.Message);
        }
    }
    public void Deny()
    {
        NavigationManager.NavigateTo($"/home/{TokenUser}/{TokenTask}", true);
    }
}

<html>
<div class="form">
    <h2 class="title" id="Title">Работа с приоритетами</h2>
    <div class="input-container ic1">
        <div class="cut"></div>
        <label for="firstname" class="placeholder">ID</label>
    </div>
    <div class="input-container ic2">
        <input @bind-value="Prioritys.Name" class="input" type="text" placeholder=" " />
        <div class="cut"></div>
        <label for="NamePlaceholder" class="placeholder">Названия</label>
    </div>
    <div class="input-container ic2">
        <div class="FlexBox">
            <button type="text" class="cancel-button" @onclick="Deny">Отмена</button>
            <button type="text" class="submit" @onclick="Accept">Подтвердить</button>
        </div>
    </div>
</div>
</html>

<script>
    function SelectError(error) {
        const parent = document.getElementById("Title");
        const originalText = parent.textContent;
        parent.textContent = error;
        setTimeout(() => {
            parent.textContent = originalText;
        }, 3000);
    }
</script>
<style>
    body {
        align-items: center;
        background-color: #8282ff;
        display: flex;
        justify-content: center;
        height: 100vh;
    }

    .form {
        background-color: #fff;
        border-radius: 20px;
        box-sizing: border-box;
        height: 400px;
        padding: 20px;
        width: 320px;
    }

    .title {
        color: black;
        font-family: sans-serif;
        font-size: 22px;
        font-weight: 600;
        margin-top: 30px;
    }

    .subtitle {
        color: black;
        font-family: sans-serif;
        font-size: 16px;
        font-weight: 600;
        margin-top: 10px;
    }

    .input-container {
        height: 50px;
        position: relative;
        width: 100%;
    }

    .ic1 {
        margin-top: 40px;
    }

    .ic2 {
        margin-top: 30px;
    }

    .input {
        background-color: AliceBlue;
        border-radius: 12px;
        border: 0;
        box-sizing: border-box;
        color: #65657b;
        font-size: 18px;
        height: 100%;
        outline: 0;
        padding: 4px 20px 0;
        width: 100%;
    }

    .cut {
        background-color: white;
        border-radius: 10px;
        height: 20px;
        left: 20px;
        position: absolute;
        top: -20px;
        transform: translateY(0);
        transition: transform 200ms;
        width: 110px;
    }

    .cut-short {
        width: 50px;
    }

    .input:focus ~ .cut,
    .input:not(:placeholder-shown) ~ .cut {
        transform: translateY(8px);
    }

    .placeholder {
        color: #65657b;
        background-color: transparent;
        font-family: sans-serif;
        left: 20px;
        line-height: 14px;
        pointer-events: none;
        position: absolute;
        transform-origin: 0 50%;
        transition: transform 200ms, color 200ms;
        top: 20px;
    }

    .input:focus ~ .placeholder,
    .input:not(:placeholder-shown) ~ .placeholder {
        transform: translateY(-30px) translateX(10px) scale(0.75);
    }

    .input:not(:placeholder-shown) ~ .placeholder {
        color: #808097;
    }

    .input:focus ~ .placeholder {
        color: #dc2f55;
    }

    .submit, .cancel-button {
        background-color: #08d;
        border-radius: 12px;
        margin: 5px;
        border: 0;
        box-sizing: border-box;
        color: #eee;
        cursor: pointer;
        font-size: 18px;
        height: 50px;
        margin-top: 38px;
        outline: 0;
        text-align: center;
        width: 100%;
    }

    .cancel-button {
        background-color: #FF5039;
    }

    .submit:active {
        background-color: #06b;
    }

    .cancel-button:active {
        background-color: #E04632;
    }

    .FlexBox {
        display: flex;
        flex: 1;
    }
</style>