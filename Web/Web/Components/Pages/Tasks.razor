@page "/home/{TokenUser}/{TokenTask}"
@rendermode RenderMode.InteractiveServer
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@code {
        [Parameter]
        public string TokenUser { get; set; } = string.Empty;
        [Parameter]
        public string TokenTask { get; set; } = string.Empty;
    public Model.Task CurrentTask{get;set;} = new Model.Task();
    public string CurrentPriority { get; set; } = "";
    public string CurrentStatus { get; set; } = "";
    public ApiClient ApiClients { get; set; } = new ApiClient("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9." +
     "eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoi" +
     "MTIzMTIzIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFt" +
     "ZWlkZW50aWZlZXIiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMDA" +
     "iLCJleHAiOjE3MzA5MDY3NDN9.ero6vopzxEbCz0XWeRIQ0eNOKL6q_CeKRMDApZeTAyc", "LANVER2024@");
    public List<Model.Status> Statuses { get; set; } = new List<Model.Status>();
    public List<Model.Priority> Priority { get; set; } = new List<Model.Priority>();
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var tasks = await ApiClients.GetTaskAsync(new Model.User()
            {
                Id = TokenUser,
                Email = "string",
                Login = "string",
                Password = "string",
                FullName = "string"
            });
        CurrentTask = tasks.FirstOrDefault(a => a.Id == Convert.ToInt32(TokenTask));
        Statuses = await ApiClients.GetStatusAsync();
        Priority = await ApiClients.GetPrioritiesAsync();
        if (CurrentTask != null)
        {
            CurrentPriority = Priority.First(a => a.Id == CurrentTask.PriorityId).Name;
            CurrentStatus = Statuses.First(a => a.Id == CurrentTask.StatusId).Name;
        }
        else
        {
            CurrentPriority = Priority.First(a => a.Id == 1).Name;
            CurrentStatus = Statuses.First(a => a.Id == 1).Name;
            CurrentTask = new Model.Task()
                {
                    Id = 0,
                    Name = " ",
                    Description = " ",
                    DateEnd = DateTime.Now.ToShortDateString(),
                    DateStart = DateTime.Now.ToShortDateString(),
                };
        }
    }
    public async void SaveTask()
    {
        try
        {
            var user = new Model.User()
                {
                    Id = TokenUser,
                    Email = "string",
                    Login = "string",
                    Password = "string",
                    FullName = "string"
                };
            CurrentTask.StatusId = Statuses.First(a => a.Name == CurrentStatus).Id;
            CurrentTask.PriorityId = Priority.First(a => a.Name == CurrentPriority).Id;
            CurrentTask.DateStart = CurrentTask.StartDate.ToString();
            CurrentTask.DateEnd = CurrentTask.DeadLine.ToString();
            if (CurrentTask.Id == 0)
            {
                await ApiClients.PostTask(CurrentTask, user);
            }
            else
            {
                await ApiClients.PutTask(CurrentTask, user);
            }
            NavigationManager.NavigateTo($"/home/{TokenUser}");
        }
        catch(Exception ex)
        {
        await JSRuntime.InvokeVoidAsync("SelectError", ex.Message);
        }
    }
    public void DenyTask()
    {
        NavigationManager.NavigateTo($"/home/{TokenUser}");
    }
    public void AddPriority()
    {
        NavigationManager.NavigateTo($"/home/{TokenUser}/{TokenTask}/Priority");
    }
    public void AddStatus()
    {
        NavigationManager.NavigateTo($"/home/{TokenUser}/{TokenTask}/Status");
    }
}
@{
    void RenderStatus(List<Model.Status> statuses)
    {
        @foreach(var status in statuses)
        {
            <option>@status.Name</option>
        }
    }
    void RenderPriority(List<Model.Priority> priorities)
    {
        @foreach (var priority in priorities)
        {
            <option>@priority.Name</option>
        }
    }
}


<html>
    <div class="form">
    <h2 class="title" id="title">Работа с задачами</h2>
    <div class="input-container ic1">
        <input id="firstname" class="input" type="text" placeholder=" " @bind-value="CurrentTask.Id" disabled="disabled" />
        <div class="cut"></div>
        <label for="ID" class="placeholder">ID</label>
    </div>
    <div class="input-container ic2">
        <input id="Name" class="input" type="text" placeholder="" @bind-value="CurrentTask.Name" />
        <div class="cut"></div>
        <label for="lastname" class="placeholder">Названия</label>
    </div>
    <div class="input-container ic2">
        <div class="input-container ic1">
            <input id="firstname" class="input" type="text" placeholder=" " @bind-value="CurrentTask.Description" />
            <div class="cut"></div>
            <label for="Description" class="placeholder">Описания</label>
        </div>
        <div class="input-container ic1">
            <div class="FlexBox">
                <div class="input-container ic1" style="margin-top:0px">
                    <select name="city" id="city-select" class="input" required @bind="CurrentPriority">
                        @if (Priority != null)
                        {
                            RenderPriority(Priority);
                        }
                    </select>
                    <div class="cut"></div>
                    <label for="firstname" class="placeholder">Выберите приоритет</label>
                </div>
                <div class="button-container">
                    <button class="add-button" @onclick="AddPriority"><b>+</b></button>
                </div>
            </div>
        </div>
        <div class="input-container ic1">
            <div class="input-container ic1">
                <div class="FlexBox">
                    <div class="input-container ic1" style="margin-top:0px">
                        <select name="city" id="city-select" class="input" required @bind="CurrentStatus">
                            @if (Statuses != null)
                            {
                               RenderStatus(Statuses);
                            }
                        </select>
                        <div class="cut"></div>
                        <label for="firstname" class="placeholder">Выберите статус</label>
                    </div>
                    <div class="button-container">
                        <button class="add-button" @onclick="AddStatus"><b>+</b></button>
                    </div>
                </div>
                <div class="input-container ic1">
                    <input id="firstname" class="input" type="date" placeholder=" " @bind="CurrentTask.StartDate" />
                    <div class="cut"></div>
                    <label for="firstname" class="placeholder">Дата начала</label>
                </div>
                <div class="input-container ic1">
                    <input id="firstname" class="input" type="date" placeholder=" " @bind="CurrentTask.DeadLine" />
                    <div class="cut"></div>
                    <label for="firstname" class="placeholder">Дата окончания</label>
                </div>
                <div class="FlexBox">
                    <button type="text" class="cancel-button" @onclick="DenyTask">Отмена</button>
                    <button type="text" class="submit" @onclick="SaveTask">Подтвердить</button>
                </div>
            </div>
        </div>
    </div>
</div>
</html>

<script>
    function SelectError(error) {
        const parent = document.getElementById("title");
        const originalText = parent.textContent;
        parent.textContent = error;
        setTimeout(() => {
            parent.textContent = originalText;
        }, 3000);
    }
</script>
<style>
    body {
        align-items: center;
        background-color: #8282ff;
        display: flex;
        justify-content: center;
        height: 100vh;
    }

    .form {
        background-color: #fff;
        border-radius: 20px;
        box-sizing: border-box;
        height: 800px;
        padding: 20px;
        width: 320px;
    }

    .title {
        color: black;
        font-family: sans-serif;
        font-size: 24px;
        font-weight: 600;
        margin-top: 30px;
    }

    .subtitle {
        color: black;
        font-family: sans-serif;
        font-size: 16px;
        font-weight: 600;
        margin-top: 10px;
    }

    .input-container {
        height: 50px;
        position: relative;
        width: 100%;
    }

    .ic1 {
        margin-top: 40px;
    }

    .ic2 {
        margin-top: 30px;
    }

    .input {
        background-color: aliceblue;
        border-radius: 12px;
        border: 0;
        box-sizing: border-box;
        color: #65657b;
        font-size: 18px;
        height: 100%;
        outline: 0;
        padding: 4px 20px 0;
        width: 100%;
    }

    .cut {
        background-color: white;
        border-radius: 10px;
        height: 20px;
        left: 20px;
        position: absolute;
        top: -20px;
        transform: translateY(0);
        transition: transform 200ms;
        width: 110px;
    }

    .cut-short {
        width: 50px;
    }

    .input:focus ~ .cut,
    .input:not(:placeholder-shown) ~ .cut {
        transform: translateY(8px);
    }

    .placeholder {
        color: #65657b;
        background-color: transparent;
        font-family: sans-serif;
        left: 20px;
        line-height: 14px;
        pointer-events: none;
        position: absolute;
        transform-origin: 0 50%;
        transition: transform 200ms, color 200ms;
        top: 20px;
    }

    .input:focus ~ .placeholder,
    .input:not(:placeholder-shown) ~ .placeholder {
        transform: translateY(-30px) translateX(10px) scale(0.75);
    }

    .input:not(:placeholder-shown) ~ .placeholder {
        color: #808097;
    }

    .input:focus ~ .placeholder {
        color: #dc2f55;
    }

    .select.input {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-color: aliceblue;
        border-radius: 12px;
        border: 0;
        box-sizing: border-box;
        color: #65657b;
        font-size: 18px;
        height: 100%;
        outline: 0;
        padding: 4px 20px 0;
        width: 100%;
    }

    .select:valid ~ .cut {
        transform: translateY(8px);
    }

    .select:valid ~ .placeholder {
        transform: translateY(-30px) translateX(10px) scale(0.75);
        color: #808097;
    }

    .select:focus ~ .placeholder {
        color: #dc2f55;
    }

    .submit, .cancel-button {
        background-color: #08d;
        border-radius: 12px;
        margin: 5px;
        border: 0;
        box-sizing: border-box;
        color: #eee;
        cursor: pointer;
        font-size: 18px;
        height: 50px;
        margin-top: 38px;
        outline: 0;
        text-align: center;
        width: 100%;
    }

    .cancel-button {
        background-color: #FF5039;
    }

    .submit:active {
        background-color: #06b;
    }

    .cancel-button:active {
        background-color: #E04632;
    }

    .FlexBox {
        display: flex;
        align-items: center;
        height: 100%;
    }

    .button-container {
        display: flex;
        width: 10%;
    }

    .add-button {
        width: 100%;
        height: 30%;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        padding: 5%;
        background-color: #4CAF50;
        color: #fff;
        width: 30px;
        height: 30px;
    }
</style>