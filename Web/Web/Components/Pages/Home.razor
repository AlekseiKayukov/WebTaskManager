@page "/home/{TokenUser}"
@using Microsoft.AspNetCore.Components.Web
@using Web.Model;
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime
@code
{
    [Parameter]
    public string TokenUser { get; set; } = string.Empty;
    public bool FlagSort { get; set; }
    public DateTime parsedDate { get; set; }
    public List<Model.Task> Tasks { get; set; } = new List<Model.Task>();
    public string TaskStatus { get; set; } = string.Empty;
    public List<Model.Status> Statuses { get; set; } = new List<Model.Status>();
    public List<Model.Priority> Priorities { get; set; } = new List<Model.Priority>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var apiClient = new ApiClient("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9." +
       "eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoi" +
       "MTIzMTIzIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFt" +
       "ZWlkZW50aWZlZXIiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMDA" +
       "iLCJleHAiOjE3MzA5MDY3NDN9.ero6vopzxEbCz0XWeRIQ0eNOKL6q_CeKRMDApZeTAyc", "LANVER2024@");
        var tasks = await apiClient.GetTaskAsync(new User()
            {
                Id = TokenUser,
                Email = "string",
                Login = "string",
                Password = "string",
                FullName = "string"
            });

        var statuses = await apiClient.GetStatusAsync();
        var priorities = await apiClient.GetPrioritiesAsync();

        Tasks = tasks;
        Statuses = statuses;
        Priorities = priorities;

    }

    public void AddButton(Model.Status status)
    {

    }

    public void EditButton(Model.Task task,Model.Status status)
    {
        JSRuntime.InvokeVoidAsync("blockInputs", task.Id);
    }

    public void DeleteButton(Model.Task task,Model.Status status)
    {
        JSRuntime.InvokeVoidAsync("RemoveDiv", task.Id,status.Id);
    }

    public void FilterButton()
    {

    }

    public void SortButton(Model.Status status)
    {
        if (FlagSort)
        {
            JSRuntime.InvokeVoidAsync("SortDiv", status.Id, FlagSort);
            FlagSort = false;
        }
        else
        {
            JSRuntime.InvokeVoidAsync("SortDiv", status.Id, FlagSort);
            FlagSort = true;
        }
    }
}
@{
       void RenderTasksAndStatuses(List<Model.Task> tasks, List<Status> statuses)
        {
        @foreach (var status in statuses)
        {
            <div class="column">
                <div class="header">
                    <h3>@status.Name</h3>
                    <div class="actions">
                        <button class="sort-button" @onclick="@(e => SortButton(status))">↑↓</button>
                    </div>
                </div>
                <div id="@status.Id-s">
                    @foreach (var task in tasks)
                    {
                        @if (task.StatusId == status.Id)
                        {
                            <div class="task-area" id="@task.Id">
                                <div class="task" draggable="true">
                                    <div class="panel">
                                    <table>
                                    <tr>
                                      <td><input type="text" id="@task.Id-text" style="border:none;" @bind-value=@task.Name disabled="disabled"></input></td>
                                    </tr>
                                     <tr>
                                                <td><textarea id="@task.Id-description" style="border:none;" disabled="disabled">@task.Description</textarea></td>
                                     </tr>
                                     <tr>
                                     @{
                                         parsedDate = Convert.ToDateTime(@task.DateEnd);
                                     }
                                                <td><input type="date" id="@task.Id-deadline" @bind-value=@parsedDate style="border:none;" disabled="disabled"></td>
                                     </tr>
                                        </table>
                                        <button class="edit-task-button" id="@task.Id-bt-task" @onclick="@(e => EditButton(task,status))">📒</button>
                                        <button class="delete-task-button" @onclick="@(e => DeleteButton(task,status))">❌</button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    }
}
<!DOCTYPE html>
<html>
<head>
    <title>Задачник</title>
     <link rel="stylesheet" href="~/StyleTask.css" />
</head>
<body>
    <div class="sidebar">
        <h3>Меню</h3>
        <nav class="menu">
            <a href="#" class="menu-item is-active">Задачи</a>
        </nav>
    </div>
    <div class="container">
    @if(Tasks!=null&Statuses!=null)
        {
            RenderTasksAndStatuses(Tasks!, Statuses!);
        }
    </div>
 </body>
</html>
<style>

body {
    font-family: 'Arial', sans-serif;
    display: flex;
    min-height: 100%;
    margin: 0;
    background: #8282ff;
}

.sidebar {
    background-color: #2e3047;
    width: 250px;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    height: 100%;
    position: fixed;
    top: 0;
    left: 0;
}

    .sidebar h3 {
        color: #707793;
        font-size: 0.75rem;
        text-transform: uppercase;
        margin-bottom: 0.5em;
        text-align: center;
    }

    .sidebar .menu {
        margin: 0 -1rem;
    }

        .sidebar .menu .menu-item {
            display: block;
            padding: 1em;
            color: #FFF;
            text-decoration: none;
            transition: 0.2s linear;
        }

            .sidebar .menu .menu-item.is-active {
                background-color: #3f4259;
            }

.container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-left: 270px;
    padding: 20px;
    width: calc(100vw - 270px); /* Задаем ширину контейнера как 100% ширины экрана минус ширина боковой панели */
    height: 100vh;
    overflow-y: auto; /* Добавляем скролл по вертикали */
}


.column {
    background-color: #fff;
    padding: 20px;
    border-radius: 5px;
    width: 33%;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    gap: 20px;
}

    .column h2 {
        margin-bottom: 10px;
        text-align: center;
    }

    .column .header {
        background-color: #f0f0f0;
        padding: 10px;
        border-radius: 5px 5px 0 0;
        margin-bottom: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .column .header button {
            background-color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            color: #333;
            transition: background-color 0.2s ease;
        }

            .column .header button:hover {
                background-color: #eee;
            }

.task .actions {
    position: absolute;
    top: 5px;
    right: 10px;
    display: flex;
    gap: 5px;
}

.task {
    background-color: #fff;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 10px;
    cursor: move;
    user-select: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    position: relative;
    display: flex;
}

.panel h3 {
    margin-top: 0;
}

.panel p {
    margin-bottom: 5px;
}

.panel .actions button {
    background-color: #fff;
    border: none;
    padding: 5px 8px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    color: #333;
    transition: background-color 0.2s ease;
}

.edit-task-button {
    border: none;
    background: white;
}

.delete-task-button {
    border: none;
    background: white;
}

.task .actions button:hover {
    background-color: #eee;
}

.task.dragging {
    opacity: 0.5;
}

.column.over {
    background-color: #eee;
}

.column.over {
    background-color: #eee;
}

/* Стили для статусов */
#todo .header {
    background-color: #7acf18;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3) inset; /* Внутренняя тень */
}

#inprogress .header {
    background-color: #31b5e9;
    box-shadow: 0 2px 5px rgba(255, 165, 0, 0.3) inset; /* Внутренняя тень */
}

#done .header {
    background-color: #e26c57;
    box-shadow: 0 2px 5px rgba(0, 128, 0, 0.3) inset; /* Внутренняя тень */
}

/* Полупрозрачность области задач */
.column .task-area {
    position: relative; /* Чтобы добавить тень к области задач */
    background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */
    padding: 10px;
    border-radius: 0 0 5px 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) inset; /* Внутренняя тень */
}

    .column .task-area:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */
        z-index: -1; /* Чтобы тень была видна */
    }

.column .header .actions {
    display: flex;
    gap: 5px;
}

    .column .header .actions button {
        background-color: #fff;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        color: #333;
        transition: background-color 0.2s ease;
    }

        .column .header .actions button:hover {
            background-color: #eee;
        }
        </style>
        <script>

    function SortDiv(sid, flag) {
        const parent = document.getElementById(sid + "-s");
        const children = parent.children;
        const array = Array.prototype.slice.call(children);
        array.sort((a, b) => {
            const dateA = new Date(a.querySelector('input[type="date"]').value);
            const dateB = new Date(b.querySelector('input[type="date"]').value);
            if (flag)
                return dateB - dateA; // для сортировки по возрастанию
            else
                return dateA - dateB; // для сортировки по убыванию
        });

        parent.innerHTML = '';
        array.forEach(child => parent.appendChild(child));
    }
    function blockInputs(id) {
        const flag = !document.getElementById(id + "-text").disabled;
        const element = document.getElementById(id + "-bt-task");
        if (!flag) {
            element.textContent = "✅";
        }
        if (flag) {
            element.textContent = "📒";
        }
        document.getElementById(id + "-text").disabled = flag;
        document.getElementById(id + "-description").disabled = flag;
        document.getElementById(id + "-deadline").disabled = flag;
    }
    function RemoveDiv(id, sid) {
        const parent = document.getElementById(sid + "-s")
        const child = document.getElementById(id);
        parent.removeChild(child);
    } 
        </script>
