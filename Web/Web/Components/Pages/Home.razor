@page "/home/{TokenUser}"
@using Microsoft.AspNetCore.Components.Web
@using Web.Model;
@rendermode RenderMode.InteractiveServer
@code
{
    [Parameter]
    public string TokenUser{ get; set; }
    public List<Model.Task> Tasks{get;set;}
    public string TaskStatus{ get; set; }
    public List<Model.Status> Statuses{ get; set; }
    public List<Model.Priority> Priorities{ get; set; }
    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var apiClient = new ApiClient("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9." +
       "eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoi" +
       "MTIzMTIzIiwiaHR0cDovL3NjaGVtYXMueG1sc29hcC5vcmcvd3MvMjAwNS8wNS9pZGVudGl0eS9jbGFpbXMvbmFt" +
       "ZWlkZW50aWZlZXIiOiIxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2NTU0NDAwMDA" +
       "iLCJleHAiOjE3MzA5MDY3NDN9.ero6vopzxEbCz0XWeRIQ0eNOKL6q_CeKRMDApZeTAyc", "LANVER2024@");
        var tasks = await apiClient.GetTaskAsync(new User()
            {
                Id = TokenUser,
                Email = "string",
                Login = "string",
                Password = "string",
                FullName = "string"
            });

        var statuses = await apiClient.GetStatusAsync();
        var priorities = await apiClient.GetPrioritiesAsync();

        Tasks = tasks;
        Statuses = statuses;
        Priorities = priorities;
}
}
<!DOCTYPE html>
<html>
<head>
    <title>Задачник</title>
</head>
<body>
    <div class="sidebar">
        <h3>Меню</h3>
        <nav class="menu">
            <a href="#" class="menu-item is-active">Задачи</a>
        </nav>
    </div>
    <div class="container">
        @foreach (var status in Statuses)
        {
            <div class="column">
                <div class="header">
                    <h2>@status.Name</h2>
                    <div class="actions">
                        <button class="sort-button">↑↓</button>
                        <button class="filter-button">🔍</button>
                    </div>
                </div>
                <div>
                    @foreach (var task in Tasks)
                    {
                        @if (task.Status_id == status.id)
                        {
                            <div class="task-area">
                                <div class="task" draggable="true">
                                    <h3>@task.Name</h3>
                                    <p>@task.Description</p>
                                    <p>Срок: @task.DeadLine</p>
                                    <div class="actions">
                                        <button class="edit-task-button">Редактировать</button>
                                        <button class="delete-task-button">Удалить</button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>
 </body>
</html>
<script>
    const columns = document.querySelectorAll('.column');
    const tasks = document.querySelectorAll('.task');
    const addTaskButton = document.getElementById('add-task-button');

    let draggedTask = null;

    tasks.forEach(task => {
        task.addEventListener('dragstart', handleDragStart);
        task.addEventListener('dragover', handleDragOver);
        task.addEventListener('drop', handleDrop);

        // Добавление кнопок "Редактировать" и "Удалить"
        const editButton = document.createElement('button');
        editButton.textContent = 'Редактировать';
        editButton.classList.add('edit-task-button');

        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Удалить';
        deleteButton.classList.add('delete-task-button');

        const actionsDiv = document.createElement('div');
        actionsDiv.classList.add('actions');
        actionsDiv.appendChild(editButton);
        actionsDiv.appendChild(deleteButton);

        task.appendChild(actionsDiv);
    });

    columns.forEach(column => {
        column.addEventListener('dragover', handleDragOver);
        column.addEventListener('drop', handleDrop);
    });

    addTaskButton.addEventListener('click', () => {
        window.open('\\AddTask/add_task_index.html', '_blank');
        newTask.addEventListener('dragstart', handleDragStart);
        newTask.addEventListener('dragover', handleDragOver);
        newTask.addEventListener('drop', handleDrop);

        // Добавляем новую задачу в колонку "Новые"
        document.getElementById('todo').querySelector('.task-area').appendChild(newTask);
    });

    function handleDragStart(event) {
        draggedTask = event.target;
        event.dataTransfer.setData('text/plain', event.target.id);
        event.target.classList.add('dragging');
    }

    function handleDragOver(event) {
        event.preventDefault();
    }

    function handleDrop(event) {
        event.preventDefault();

        const targetColumn = event.target.closest('.column');
        if (targetColumn) {
            targetColumn.querySelector('.task-area').appendChild(draggedTask);
            draggedTask.classList.remove('dragging');
            draggedTask = null;
        }
    }
</script>
<style>
    body {
        font-family: 'Arial', sans-serif;
        display: flex;
        min-height: 100%;
        margin: 0;
        background: #8282ff;
    }

    .sidebar {
        background-color: #2e3047;
        width: 250px;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        height: 100%;
        position: fixed;
        top: 0;
        left: 0;
    }

        .sidebar h3 {
            color: #707793;
            font-size: 0.75rem;
            text-transform: uppercase;
            margin-bottom: 0.5em;
            text-align: center;
        }

        .sidebar .menu {
            margin: 0 -1rem;
        }

            .sidebar .menu .menu-item {
                display: block;
                padding: 1em;
                color: #FFF;
                text-decoration: none;
                transition: 0.2s linear;
            }

                .sidebar .menu .menu-item.is-active {
                    background-color: #3f4259;
                }

    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-left: 270px; /* Ширина боковой панели + отступ */
        padding: 20px;
        width: 80%;
    }

    .column {
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        min-width: 250px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        gap: 20px;
        flex: 1; /* Равномерное распределение пространства между колонками */
        position: relative;
    }

        .column h2 {
            margin-bottom: 10px;
            text-align: center;
        }

        .column .header {
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 5px 5px 0 0;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

            .column .header button {
                background-color: #fff;
                border: none;
                padding: 5px 10px;
                border-radius: 5px;
                cursor: pointer;
                font-size: 1rem;
                color: #333;
                transition: background-color 0.2s ease;
            }

                .column .header button:hover {
                    background-color: #eee;
                }

    .task .actions {
        position: absolute;
        top: 5px;
        right: 10px;
        display: flex;
        gap: 5px;
    }

    .task {
        background-color: #fff;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        cursor: move;
        user-select: none;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
        position: relative;
    }

        .task h3 {
            margin-top: 0;
        }

        .task p {
            margin-bottom: 5px;
        }

        .task .actions button {
            background-color: #fff;
            border: none;
            padding: 5px 8px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            color: #333;
            transition: background-color 0.2s ease;
        }

            .task .actions button:hover {
                background-color: #eee;
            }

        .task.dragging {
            opacity: 0.5;
        }

    .column.over {
        background-color: #eee;
    }

    .column.over {
        background-color: #eee;
    }

    /* Стили для статусов */
    #todo .header {
        background-color: #7acf18;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3) inset; /* Внутренняя тень */
    }

    #inprogress .header {
        background-color: #31b5e9;
        box-shadow: 0 2px 5px rgba(255, 165, 0, 0.3) inset; /* Внутренняя тень */
    }

    #done .header {
        background-color: #e26c57;
        box-shadow: 0 2px 5px rgba(0, 128, 0, 0.3) inset; /* Внутренняя тень */
    }

    /* Полупрозрачность области задач */
    .column .task-area {
        position: relative; /* Чтобы добавить тень к области задач */
        background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */
        padding: 10px;
        border-radius: 0 0 5px 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) inset; /* Внутренняя тень */
    }

        .column .task-area:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7); /* Полупрозрачный белый */
            z-index: -1; /* Чтобы тень была видна */
        }

    .column .header .actions {
        display: flex;
        gap: 5px;
    }

        .column .header .actions button {
            background-color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            color: #333;
            transition: background-color 0.2s ease;
        }

            .column .header .actions button:hover {
                background-color: #eee;
            }
</style>
